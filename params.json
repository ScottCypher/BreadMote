{
  "name": "BreadMote",
  "tagline": "Your remote breadboard. Add an app to your hardware in minutes",
  "body": "###Developer links\r\n\r\n* [Android SDK](https://github.com/ScottCypher/BreadMote-Android)\r\n* [Android App](https://play.google.com/apps/testing/com.cypher.breadmote)\r\n* [Installation & Documentation](#installation--documentation)\r\n* [Templates](#templates)\r\n* [Examples](#examples)\r\n\r\n###BreadMote\r\n\r\nGiving your invention an app is now as easy as buttering bread. Simply import the BreadMote library into your hardware, add code to customize the app, and decide how to handle user input. That's it! When BreadMote connects to your hardware you will see your app.\r\n\r\n![alt text](http://scottcypher.github.io/BreadMote/highlight.png \"BreadMote screenshot\")\r\n\r\nThere are plenty of examples to get you started. BreadMote currently supports Wi-Fi and Bluetooth connections.\r\n\r\n###Why BreadMote?\r\n\r\n*Simple* - you only code on your hardware. There's no setup needed on the app itself!\r\n\r\n*Customizable* - switches, time pickers, sliders, labels, and more! All displayed with names you pick and arranged how you specify\r\n\r\n*Dynamic* - update, disable, add, or remove any component at any time\r\n\r\n*Troubleshooting Aid* - display error messages directly on your phone rather than guess whats going on in your hardware\r\n\r\n###Installation & Documentation\r\n\r\nYou'll need the app. It's currently only on [Android](https://play.google.com/apps/testing/com.cypher.breadmote)\r\n\r\n**Arduino** - follow [this guide](https://www.arduino.cc/en/Guide/Libraries) to install the [C++ library](https://github.com/ScottCypher/BreadMote/tree/master/libraries/c%2B%2B/)\r\n\r\n**ESP8266** - Using the Arduino IDE, follow [this guide](https://www.arduino.cc/en/Guide/Libraries) to install the [C++ library](https://github.com/ScottCypher/BreadMote/tree/master/libraries/c%2B%2B/)\r\n\r\nDocumentation for the C++ library can be found [here](http://scottcypher.github.io/BreadMote/libraries/c++/class_bread_mote.html)\r\n\r\n\r\n###Sample code\r\nBlink a light, all from your phone!\r\n\r\n    #include <BreadMote.h>\r\n    #include <SoftwareSerial.h>\r\n    SoftwareSerial mySerial(4, 2); // RX, TX\r\n    \r\n    //-----------------------------------------------------------------------\r\n    //--------------------- Boilerplate I/O methods -------------------------\r\n    \r\n    //Read data from your Bluetooth / Wi-Fi radio\r\n    char BreadMote::readByte() {\r\n      return mySerial.read();\r\n    }\r\n    \r\n    //Check to see if a byte is available to read from your Bluetooth / Wi-Fi radio\r\n    int BreadMote::getAvailableBytes() {\r\n      return mySerial.available();\r\n    }\r\n    \r\n    //Writes to your Bluetooth / Wi-Fi radio\r\n    void BreadMote::write(char buf[], int len) {\r\n      mySerial.write(buf, len);\r\n    }\r\n\r\n\r\n    //-----------------------------------------------------------------------\r\n    //------ Customize interface and how app interaction are handled --------\r\n\r\n    void onClick() {\r\n      digitalWrite(LED_BUILTIN, HIGH);\r\n      delay(500);\r\n      digitalWrite(LED_BUILTIN, LOW);\r\n    }\r\n\r\n    void BreadMote::create() {\r\n      addButton(\"Blink\", onClick);\r\n    }\r\n\r\n    //-----------------------------------------------------------------------\r\n    //--------------------------- Arduino methods ---------------------------\r\n\r\n    BreadMote breadMote;\r\n\r\n    void setup() {\r\n      Serial.begin(9600);\r\n      mySerial.begin(9600);\r\n      pinMode(LED_BUILTIN, OUTPUT);\r\n    }\r\n\r\n    void loop() {\r\n      breadMote.read();//continuously called to read and write information to the remote\r\n    }\r\n\r\nAnd here's what the corresponding remote would look like:\r\n\r\n![alt text](http://scottcypher.github.io/BreadMote/screenshot.png \"Blink BreadMote screenshot\")\r\n\r\n\r\n###Templates\r\n\r\n* [Arduino](https://github.com/ScottCypher/BreadMote/blob/master/arduino/template/template.ino)\r\n* [ESP8266](https://github.com/ScottCypher/BreadMote/blob/master/esp8266/template/template.ino)\r\n\r\n###Examples\r\n\r\n**Blink** - Blink an LED on your hardware using the app\r\n\r\n* [Arduino](https://github.com/ScottCypher/BreadMote/blob/master/arduino/blink/blink.ino)\r\n* [ESP8266](https://github.com/ScottCypher/BreadMote/blob/master/esp8266/blink/blink.ino)\r\n\r\n**Print** - Print all user interaction to your hardware's serial monitor\r\n\r\n* [Arduino](https://github.com/ScottCypher/BreadMote/blob/master/arduino/print/print.ino)\r\n* [ESP8266](https://github.com/ScottCypher/BreadMote/blob/master/esp8266/print/print.ino)\r\n\r\n###The future\r\n\r\nWith community support, maybe there could be:\r\n\r\n* more hardware support\r\n* an app for iOS\r\n* more connection protocols (e.g. Wi-Fi Direct and Bluetooth Low Energy)\r\n* more features (e.g. streaming audio and video from your hardware)\r\n\r\nIf you are interested in contributing, contact me at scott@breadmote.com\r\n\r\n###Communication protocol\r\n\r\nIf you want to port BreadMote to another hardware, information about the protocol can be found [here](http://scottcypher.github.io/BreadMote/protocol.md). Be sure to check out existing the existing libraries for example implementations.\r\n\r\n###Awesome projects\r\n\r\nIf your project uses BreadMote, I'd love to showcase it here! Contact me at scott@breadmote.com\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}